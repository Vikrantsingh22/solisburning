"use client";

import * as React from "react";
import { Area, AreaChart, CartesianGrid, XAxis } from "recharts";
import { useIsMobile } from "@/hooks/use-mobile";
import {
  Card,
  CardAction,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  ChartConfig,
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
} from "@/components/ui/chart";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { ToggleGroup, ToggleGroupItem } from "@/components/ui/toggle-group";
import { ExploitItem } from "@/types/exploits";
import { Spinner } from "./ui/spinner";

export const description =
  "An interactive area chart showing exploit data over time";

interface ChartExploitsAreaProps {
  exploits?: ExploitItem[] | null;
}

export function ChartExploitsArea({ exploits = [] }: ChartExploitsAreaProps) {
  const isMobile = useIsMobile();
  const [timeRange, setTimeRange] = React.useState("1095d");

  React.useEffect(() => {
    if (isMobile) {
      setTimeRange("365d");
    }
  }, [isMobile]);

  // Process the data for the chart
  const chartData = React.useMemo(() => {
    if (!exploits || exploits.length === 0) {
      return [];
    }

    // Group data by date and sum up values
    const groupedData = exploits.reduce((acc, exploit) => {
      const date = exploit.date.iso;
      if (!acc[date]) {
        acc[date] = {
          date,
          funds_lost: 0,
          funds_returned: 0,
          project_name: "Unknown",
        };
      }
      acc[date].funds_lost = exploit.funds_lost || 0;
      acc[date].funds_returned = exploit.funds_returned || 0;
      acc[date].project_name = exploit.project_name || "Unknown";
      return acc;
    }, {} as Record<string, { date: string; funds_lost: number; funds_returned: number; project_name: string }>);

    console.log("Grouped Data:", groupedData); // Debugging line
    // Convert to array and sort by date
    return Object.values(groupedData).sort(
      (a, b) => new Date(a.date).getTime() - new Date(b.date).getTime()
    );
  }, [exploits]);

  const filteredData = React.useMemo(() => {
    if (chartData.length === 0) {
      return [];
    }

    const referenceDate = new Date();
    let daysToSubtract = 1095;
    if (timeRange === "730d") {
      daysToSubtract = 730;
    } else if (timeRange === "365d") {
      daysToSubtract = 365;
    } else if (timeRange === "180d") {
      daysToSubtract = 180;
    } else if (timeRange === "90d") {
      daysToSubtract = 90;
    } else if (timeRange === "30d") {
      daysToSubtract = 30;
    } else if (timeRange === "7d") {
      daysToSubtract = 7;
    }
    const startDate = new Date(referenceDate);
    startDate.setDate(startDate.getDate() - daysToSubtract);

    return chartData.filter((item) => {
      const date = new Date(item.date);
      return date >= startDate;
    });
  }, [chartData, timeRange]);

  const chartConfig = {
    funds_lost: {
      label: "Funds Lost",
      color: "var(--destructive)",
    },
    funds_recovered: {
      label: "Funds Recovered",
      color: "var(--success)",
    },
    funds_returned: {
      label: "Funds Returned",
      color: "var(--warning)",
    },
  } satisfies ChartConfig;

  if (!exploits || exploits.length === 0) {
    return (
      <Card className="@container/card">
        <CardHeader>
          <CardTitle>Generating Charts</CardTitle>
          <CardDescription>Loading</CardDescription>
        </CardHeader>
        <CardContent className="flex h-auto items-center justify-center">
          <Spinner size="large" />
        </CardContent>
      </Card>
    );
  }
  return (
    <Card className="@container/card">
      <CardHeader>
        <CardTitle>Exploit Funds Overview</CardTitle>
        <CardDescription>
          <span className="hidden @[540px]/card:block">
            Total funds lost and recovered over time
          </span>
          <span className="@[540px]/card:hidden">Funds overview</span>
        </CardDescription>
        <CardAction>
          <ToggleGroup
            type="single"
            value={timeRange}
            onValueChange={setTimeRange}
            variant="outline"
            className="hidden *:data-[slot=toggle-group-item]:!px-4 @[767px]/card:flex"
          >
            <ToggleGroupItem value="1095d">Last 3 years</ToggleGroupItem>
            <ToggleGroupItem value="730d">Last 2 years</ToggleGroupItem>
            <ToggleGroupItem value="365d">Last 1 year</ToggleGroupItem>
            <ToggleGroupItem value="180d">Last 6 months</ToggleGroupItem>
          </ToggleGroup>
          <Select value={timeRange} onValueChange={setTimeRange}>
            <SelectTrigger
              className="flex w-40 **:data-[slot=select-value]:block **:data-[slot=select-value]:truncate @[767px]/card:hidden"
              size="sm"
              aria-label="Select a value"
            >
              <SelectValue placeholder="Last 3 years" />
            </SelectTrigger>
            <SelectContent className="rounded-xl">
              <SelectItem value="1095d" className="rounded-lg">
                Last 3 years
              </SelectItem>
              <SelectItem value="730d" className="rounded-lg">
                Last 2 years
              </SelectItem>
              <SelectItem value="365d" className="rounded-lg">
                Last 1 year
              </SelectItem>
              <SelectItem value="180d" className="rounded-lg">
                Last 6 months
              </SelectItem>
              <SelectItem value="90d" className="rounded-lg">
                Last 3 months
              </SelectItem>
              <SelectItem value="30d" className="rounded-lg">
                Last 30 days
              </SelectItem>
              <SelectItem value="7d" className="rounded-lg">
                Last 7 days
              </SelectItem>
            </SelectContent>
          </Select>
        </CardAction>
      </CardHeader>
      <CardContent className="px-2 pt-4 sm:px-6 sm:pt-6">
        <ChartContainer
          config={chartConfig}
          className="aspect-auto h-[250px] w-full"
        >
          <AreaChart
            data={filteredData}
            margin={{ top: 10, right: 30, left: 0, bottom: 0 }}
          >
            <defs>
              <linearGradient id="fillLost" x1="0" y1="0" x2="0" y2="1">
                <stop
                  offset="5%"
                  stopColor="var(--destructive)"
                  stopOpacity={0.8}
                />
                <stop
                  offset="95%"
                  stopColor="var(--destructive)"
                  stopOpacity={0.1}
                />
              </linearGradient>
              <linearGradient id="fillRecovered" x1="0" y1="0" x2="0" y2="1">
                <stop
                  offset="5%"
                  stopColor="var(--success)"
                  stopOpacity={0.8}
                />
                <stop
                  offset="95%"
                  stopColor="var(--success)"
                  stopOpacity={0.1}
                />
              </linearGradient>
              <linearGradient id="fillReturned" x1="0" y1="0" x2="0" y2="1">
                <stop
                  offset="5%"
                  stopColor="var(--warning)"
                  stopOpacity={0.8}
                />
                <stop
                  offset="95%"
                  stopColor="var(--warning)"
                  stopOpacity={0.1}
                />
              </linearGradient>
            </defs>
            <CartesianGrid strokeDasharray="3 3" vertical={false} />
            <XAxis
              dataKey="date"
              tickLine={false}
              axisLine={false}
              tickMargin={8}
              minTickGap={32}
              tickFormatter={(value) => {
                const date = new Date(value);
                return date.toLocaleDateString("en-US", {
                  month: "short",
                  day: "numeric",
                  year: timeRange === "730d" ? "2-digit" : undefined,
                });
              }}
            />
            <ChartTooltip
              cursor={false}
              defaultIndex={isMobile ? -1 : 10}
              content={
                <ChartTooltipContent
                  labelFormatter={(value, payload) => {
                    const date = new Date(value).toLocaleDateString("en-US", {
                      month: "short",
                      day: "numeric",
                      year: "numeric",
                    });
                    const projectName =
                      payload?.[0]?.payload?.project_name || "Unknown";
                    return (
                      <div className="flex flex-col gap-1">
                        <span>{date}</span>
                        <span className="text-muted-foreground">
                          {projectName}
                        </span>
                      </div>
                    );
                  }}
                  indicator="dot"
                />
              }
            />
            <Area
              dataKey="funds_lost"
              type="monotone"
              fill="url(#fillLost)"
              stroke="var(--destructive)"
              stackId="a"
            />
            <Area
              dataKey="funds_recovered"
              type="monotone"
              fill="url(#fillRecovered)"
              stroke="var(--success)"
              stackId="a"
            />
            <Area
              dataKey="funds_returned"
              type="monotone"
              fill="url(#fillReturned)"
              stroke="var(--warning)"
              stackId="a"
            />
          </AreaChart>
        </ChartContainer>
      </CardContent>
    </Card>
  );
}
